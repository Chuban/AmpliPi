openapi: 3.0.0
info:
  title: AmpliPi
  description: |
    This is the AmpliPi home audio system's control server.
    # Control
    This API can be used to control all of the sources and zones connected to the AmpliPi controller.
    Groups of zones can be controlled together using the group methods.
    Digital streams that are connected to sources can be configured with the stream methods.
    # OpenAPI
    This API is documented using the OpenAPI specification
  version: '1.0'
  contact:
    email: info@micro-nova.com
    name: Micronova
    url: micro-nova.com
  x-logo:
    url: 'https://micro-nova.github.io/ethaudio-rpi-controller/amplipi_icon_white.png'
    altText: AmpliPi Logo
  license:
    name: GPL
    url: http://amplipi.local:5000/license
servers:
  - url: 'http://amplipi.local:5000/api'
    description: AmpliPi Controller
tags:
- name: source
  description: Audio source
- name: zone
  description: Stereo output to a set of speakers, typically a room
- name: group
  description: Group of zones
paths:
  /sources/{sourceId}:
    get:
      summary: "Get Source Info by Source ID"
      tags:
        - source
      parameters:
        - name: sourceId
          description: Source ID
          required: true
          in: path
          schema:
            type: integer
            minimum: 0
            maximum: 3
      responses:
        '200':
          description: Source Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
              examples:
                Get Source J1:
                  value:
                    id: 1
                    name: J1
                    input: stream=8081
        '404':
          description: Source Not Found
      operationId: get-source
      description: Retrieve the information of the source with the matching source ID.
    patch:
      summary: Update Source Information
      tags:
        - source
      parameters:
        - name: sourceId
          required: true
          in: path
          schema:
            type: integer
            minimum: 0
            maximum: 3
      operationId: patch-source
      responses:
        '200':
          description: Source Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '404':
          description: Source Not Found
      description: Update the configuration of a source.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                input:
                  type: string
            examples:
              Update Input to RCA input:
                value:
                  input: local
              Update name:
                value:
                  name: J2
        description: Patch source configuration to update.
  /zone:
    post:
      summary: Create New Zone
      tags:
        - zone
      operationId: post-zone
      responses:
        '200':
          description: Zone Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
        '400':
          description: Missing Required Information
        '409':
          description: Zone ID already taken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Zone'
        description: Post the necessary fields for the API to create a new zone.
      description: Create a new zone.
  /zones/{zoneId}:
    get:
      summary: Get Zone Info by Zone ID
      tags:
        - zone
      parameters:
        - name: zoneId
          required: true
          in: path
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: Zone Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
              examples:
                Get Zone Master Bedroom:
                  value:
                    id: 7
                    name: Master Bedroom
                    source_id: 2
                    mute: False
                    vol: -42
                    disabled: false
        '404':
          description: Zone Not Found
      operationId: get-zone
      description: Retrieve the information of the zone with the matching zone ID.
    patch:
      summary: Update Zone
      tags:
        - zone
      parameters:
        - name: zoneId
          required: true
          in: path
          schema:
            type: integer
            minimum: 0
      operationId: patch-zone
      responses:
        '200':
          description: Zone Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '404':
          description: Zone Not Found
      description: Update the configuration of a zone.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Update zone name
                source-id:
                  type: integer
                  minimum: 0
                  maximum: 3
                mute:
                  type: boolean
                  description: Mute or unmute
                vol:
                  type: integer
                  minimum: -79
                  maximum: 0
                  description: Volume level in dB
            examples:
              Update Input to RCA input:
                value:
                  input: local
              Update name:
                value:
                  name: J2
        description: Patch zone configuration to update.
  /group:
    post:
      summary: Create New Group
      tags:
        - group
      operationId: post-group
      responses:
        '200':
          description: Group Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Missing Required Information
        '409':
          description: Group ID already taken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        description: Post the necessary fields for the API to create a new group.
      description: Create a new group.
  /groups/{groupId}:
    get:
      summary: Get Group Info by Group ID
      tags:
        - group
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: Group Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
              examples:
                Get Group Downstairs:
                  value:
                    id: 3
                    name: Downstairs
                    source_id: 1
                    mute: False
                    vol: -50
        '404':
          description: Group Not Found
      operationId: get-group
      description: Retrieve the information of the group with the matching group ID.
    patch:
      summary: Update Group
      tags:
        - group
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: integer
            minimum: 0
      operationId: patch-group
      responses:
        '200':
          description: Group Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '404':
          description: Group Not Found
      description: Update the configuration of a group.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Update group name
                zones:
                  type: array
                  items:
                    type: integer
                  description: Update member zones
                source-id:
                  type: integer
                  minimum: 0
                  maximum: 3
                mute:
                  type: boolean
                  description: Mute or unmute all of the zones in group
                vol-delta:
                  type: integer
                  minimum: -79
                  maximum: 79
                  description: Amount to adjust volume per member zone
            examples:
              Update Input to RCA input:
                value:
                  input: local
              Update name:
                value:
                  name: J2
        description: Patch group configuration to update.
    delete:
      summary: Delete Group
      tags:
        - group
      parameters:
        - name: groupId
          required: true
          in: path
          schema:
            type: integer
            minimum: 0
      operationId: delete-group
      description: Delete a group
      responses:
        '200':
          description: Group Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '404':
          description: Group Not Found

components:
  schemas:
    Source:
      title: Source
      type: object
      description: Audio source that can output on any zone. Can be connected to an RCA input or a digital stream.
      properties:
        id:
          type: integer
          format: int32
          minimum: 0
          maximum: 3
          description: Unique source identifier
        name:
          type: string
          description: friendly source name
        input:
          type: string
          description: the connected input to the source, either 'local' (RCA)or 'stream=STREAM_ID' for (sharport/pandora/..) or '' to indicate disconnected
      x-examples:
        J1:
          id: 0
          name: J1
          input: stream=90801
      required:
        - id
        - name
        - input
    Stream:
      title: Stream
      type: object
      description: Digital stream such as Pandora, Airplay or Spotify
      properties:
        name:
          type: string
          description: Friendly stream name, ie. Matt and Kim Radio
        type:
          type: string
          description: Stream type
          enum:
            - pandora
            - shairport
        info:
          type: object
          description: Additional info about the current audio playing from the stream
        status:
          type: string
          description: connected/playing status of the stream
      required:
        - name
        - type
    Zone:
      title: Zone
      type: object
      description: Audio output to a stereo pair of speakers, typically belonging to a room.
      properties:
        id:
          type: integer
          format: int32
          minimum: 0
          description: Zero based id of the physical audio output (controller * 6 + zone)
        name:
          type: string
          description: Room name, ie. Dining Room
        source_id:
          type: integer
          format: int32
          minimum: 0
          maximum: 3
          description: Id of connected audio source
        mute:
          type: boolean
          description: Set to true if audio output is muted
        vol:
          type: integer
          description: Output volume in dB
          format: int32
          minimum: -79
          maximum: 0
        disabled:
          type: boolean
          description: Set to true if zone is not connected to a speaker
      required:
        - id
        - source_id
        - mute
        - vol
        - disabled
      x-examples:
        Master Bedroom:
          id: 5
          name: Master Bedroom
          mute: false
          vol: -40
          disabled: false
    Group:
      title: Group
      type: object
      description: A group of zones that can share the same audio input and be controlled as a group ie. Updstairs. Volume, mute, and source_id fields are aggregates of the member zones.
      properties:
        id:
          type: integer
          format: int32
          minimum: 0
          description: Unique group identifier
        name:
          type: string
          description: Group name, ie. Upstairs
        zones:
          type: array
          items:
            type: integer
            description: zone id
          description: Set of zones that belong to group, a zone can belong to multiple groups
        source_id:
          type: integer
          format: int32
          minimum: 0
          maximum: 3
          nullable: true
          description: Id of connected audio source if any (null if individual zones have difference connected sources)
        mute:
          type: boolean
          description: Set to true if all zones audio output is muted
        vol:
          type: integer
          description: Aggregate output volume of all zones in dB
          format: int32
          minimum: -79
          maximum: 0
      required:
        - id
        - name
        - zones
      x-examples:
        Master Bedroom:
          id: 5
          name: Master Bedroom
          mute: false
          vol: -40
          disabled: false
    Status:
      title: Status
      type: object
      description: Complete Controller Status
      properties:
        sources:
          type: array
          items:
            $ref: '#/components/schemas/Source'
        zones:
          type: array
          items:
            $ref: '#/components/schemas/Zone'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
        streams:
          type: array
          items:
            $ref: '#/components/schemas/Stream'
  securitySchemes: {}
